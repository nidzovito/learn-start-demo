{"version":3,"sources":["components/home_container/index.js","components/stories_carousel/index.js","components/stories_container/index.js","components/header/index.js","App.js","serviceWorker.js","index.js"],"names":["contentSections","title","subtitle","image","ContentSection","flipImage","className","cx","style","backgroundImage","HomeContainer","to","map","content","index","key","StoriesCarousel","stories","spaceBetween","slidesPerView","autoplay","delay","disableOnInteraction","story","link","id","avatar","author","StoriesContainer","Header","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8ef9a9e.chunk.js","sourcesContent":["import React from 'react';\nimport cx from 'classnames';\nimport { Link } from 'react-router-dom';\n\nimport './home_container.scss';\n\nconst contentSections = [\n  {\n    title: 'Only the hottest startups.',\n    subtitle:\n      'We hand-select only the hottest startups and our expert copywriters interview and produce every story.',\n    image: 'https://cdn.worldvectorlogo.com/logos/react-1.svg',\n  },\n  {\n    title: 'Simplest way to read.',\n    subtitle:\n      'Learn from your phone or from your computer, and continue from where you left off anytime.',\n    image: 'https://cdn.worldvectorlogo.com/logos/react-1.svg',\n  },\n  {\n    title: 'Free. Forever.',\n    subtitle:\n      \"We're a non-profit project supported by Sillicon Valley's top VCs and startup incubators. You won't have to pay a cent.\",\n    image: 'https://cdn.worldvectorlogo.com/logos/react-1.svg',\n  },\n];\n\nexport const HomeContainer = () => (\n  <div className='page-home'>\n    <section className='container-fluid page-home-hero'>\n      <h1>Stay hungry. Stay foolish.</h1>\n      <p>Learn from the hottest startups in the world.</p>\n      <Link to='/stories' className='btn'>\n        Read Now\n      </Link>\n    </section>\n\n    <section className='page-home-bar'>\n      <div className='container'>\n        <h2>Smart tools for founders.</h2>\n        <p>\n          LearnStart is the simplest way for startup founders to discover\n          inspiring stories from startup founders all over the world, all in one\n          place.\n        </p>\n      </div>\n    </section>\n\n    {contentSections.map((content, index) => (\n      <ContentSection key={index} {...content} flipImage={index % 2 === 0} />\n    ))}\n\n    <section className='page-home-bar'>\n      <div className='container'>\n        <h2>Let's get started.</h2>\n        <Link to='/stories' className='btn'>\n          Read Now\n        </Link>\n      </div>\n    </section>\n  </div>\n);\n\nexport const ContentSection = ({\n  title,\n  subtitle,\n  image,\n  flipImage = false,\n}) => (\n  <section\n    className={cx('content-section container', {\n      'content-section--flipped': flipImage,\n    })}\n  >\n    <div className='content-section-image'>\n      <div style={{ backgroundImage: `url(\"${image}\")` }} />\n    </div>\n    <div className='content-section-text'>\n      <h2>{title}</h2>\n      <p>{subtitle}</p>\n    </div>\n  </section>\n);\n\nexport default HomeContainer;\n","import React from 'react';\nimport Swiper from 'react-id-swiper';\nimport { Link } from 'react-router-dom';\n\nimport './stories_carousel.scss';\n\nexport const StoriesCarousel = ({ title, stories }) => {\n  const swiperParams = {\n    spaceBetween: 16,\n    slidesPerView: 'auto',\n    autoplay: {\n      delay: 2500,\n      disableOnInteraction: false\n    },\n  };\n\n  return (\n    <section className='stories-carousel container-fluid'>\n      <h2>{title}</h2>\n\n      <Swiper {...swiperParams}>\n        {stories.map(story => (\n          <Link to={story.link} key={story.id}>\n            <div\n              className='card-image'\n              style={{ backgroundImage: `url(${story.image})` }}\n            />\n            <div className='card-footer'>\n              <h3>{story.title}</h3>\n              <div className='card-author'>\n                <div\n                  className='card-avatar'\n                  style={{ backgroundImage: `url(${story.avatar})` }}\n                />\n                <span>{story.author}</span>\n              </div>\n            </div>\n          </Link>\n        ))}\n      </Swiper>\n    </section>\n  );\n};\n\nexport default StoriesCarousel;\n","import React from 'react';\n\nimport StoriesCarousel from '../stories_carousel';\nimport './stories_container.scss';\n\nconst stories = [\n  {\n    id: 'story1',\n    title: 'How I survived death.',\n    image: '',\n    author: 'John Snow',\n    avatar: '',\n    link: '/stories/how-i-survived-death',\n  },\n  {\n    id: 'story2',\n    title: 'One day I woke up, and I realized that I was dead a bit.',\n    image: '',\n    author: 'John Snow',\n    avatar: '',\n    link: '/stories/one-day-i-woke-up-and-i-realized',\n  },\n  {\n    id: 'story3',\n    title: 'How I survived death.',\n    image: '',\n    author: 'John Snow',\n    avatar: '',\n    link: '/stories/how-i-survived-death',\n  },\n];\n\nexport const StoriesContainer = () => (\n  <div className='page-stories'>\n    <section className='page-stories-hero'>\n      <h1>Stories</h1>\n    </section>\n\n    <StoriesCarousel stories={stories} title='Latest' />\n    <StoriesCarousel stories={stories} title=\"Editor's Picks\" />\n  </div>\n);\n\nexport default StoriesContainer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './header.scss';\n\nexport const Header = () => (\n  <header className='container-fluid'>\n    <nav>\n      <Link to='/home' className='link-home h3 font-weight-bold'>\n        LearnStart\n      </Link>\n      <Link to='#' className='link-signup'>\n        Sign up\n      </Link>\n    </nav>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\n\nimport HomeContainer from './components/home_container';\nimport StoriesContainer from './components/stories_container';\nimport Header from './components/header';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <BrowserRouter basename='/'>\n      <Header />\n      <main>\n        <Switch>\n          <Route exact path='/home' component={HomeContainer}></Route>\n          <Route exact path='/stories' component={StoriesContainer}></Route>\n          <Redirect to='/home' />\n        </Switch>\n      </main>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}