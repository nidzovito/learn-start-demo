{"version":3,"sources":["index.css","home_container.scss","../../App.scss","../../../node_modules/sass-mq/_mq.scss","stories_carousel.scss","../../../node_modules/swiper/swiper.scss","../../../node_modules/swiper/components/core/core.scss","stories_container.scss","header.scss","App.scss","../node_modules/sass-mq/_mq.scss"],"names":[],"mappings":"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","file":"main.db59414f.chunk.css","sourcesContent":["body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n    monospace;\n}\n","@import \"../../App.scss\";\n\n.page-home-hero {\n  height: calc(100vh - 3.5rem);\n  background-color: $color-black;\n  color: $color-white;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  padding-top: 2rem;\n\n  @include mq($from: medium) {\n    height: calc(100vh - 5rem);\n    align-items: flex-start;\n    justify-content: center;\n    padding-top: 0;\n  }\n\n  h1 {\n    max-width: 10rem;\n\n    @include mq($from: medium) {\n      max-width: unset;\n    }\n  }\n\n  p {\n    margin-bottom: 1.5rem;\n  }\n}\n\n.page-home-bar {\n  background-color: $color-light-gray;\n  text-align: center;\n\n  h2 {\n    color: $color-black;\n  }\n\n  p {\n    color: $color-dark-gray;\n  }\n\n  .container {\n    max-width: 36rem;\n    padding-top: 3rem;\n    padding-bottom: 3rem;\n\n    @include mq($from: medium) {\n      padding-top: 5rem;\n      padding-bottom: 5rem;\n    }\n  }\n}\n\n.content-section {\n  background-color: $color-white;\n  display: flex;\n  flex-direction: column;\n\n  &-image {\n    margin-left: -1rem;\n    margin-right: -1rem;\n\n    & > div {\n      height: 0;\n      padding-bottom: 100%;\n      background-color: $color-dark-gray;\n      background-size: cover;\n      background-position: center;\n      background-repeat: no-repeat;\n    }\n  }\n\n  &-text {\n    overflow-y: auto;\n    padding-top: 1rem;\n    padding-bottom: 3rem;\n    text-align: center;\n\n    h2 {\n      color: $color-black;\n    }\n\n    p {\n      color: $color-dark-gray;\n    }\n  }\n\n  @include mq($from: large) {\n    flex-direction: row;\n    padding-top: 5rem;\n    padding-bottom: 5rem;\n   \n    & > div {\n      flex: 1;\n    }\n\n    &-image {\n      margin-left: 0;\n      margin-right: 0;\n      padding-left: 0;\n      padding-right: 1rem;\n    }\n\n    &-text {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      text-align: left;\n      padding-left: 6rem;\n      padding-right: 0;\n      padding-top: 0;\n      padding-bottom: 0;\n    }\n\n    &--flipped &-image {\n      order: 2;\n      padding-left: 1rem;\n      padding-right: 0;\n    }\n\n    &--flipped &-text {\n      order: 1;\n      padding-left: 0;\n      padding-right: 6rem;\n    }\n  }\n}\n","@import \"~sass-mq/mq\";\n\n$mq-breakpoints: (\n  small: 576px,\n  medium: 768px,\n  large: 992px,\n  xlarge: 1200px,\n);\n\n// Color Palette\n$color-black: #1c1c1c;\n$color-dark-gray: #8f8e8b;\n$color-gray: #e4e5e6;\n$color-light-gray: #f4f4f4;\n$color-white: #fff;\n$color-green: #159f9e;\n\n// typography\n$weight-light: 300;\n$weight-regular: 400;\n$weight-semibold: 600;\n$weight-bold: 700;\n$weight-black: 900;\n\nhtml, body {\n  font-family: 'Source Sans Pro', sans-serif;\n}\n\nh1, .h1 {\n  font-size: 30px;\n}\n\nh2, .h2 {\n  font-size: 25px;\n}\n\nh3, .h3 {\n  font-size: 20px;\n}\n\np, span, a {\n  font-size: 13px;\n}\n\n@include mq($from: medium) {\n  h1, .h1 {\n    font-size: 40px;\n  }\n  \n  h2, .h2 {\n    font-size: 35px;\n  }\n  \n  h3, .h3 {\n    font-size: 25px;\n  }\n  \n  p, span, a {\n    font-size: 15px;\n  }\n}\n\n.font-weight-bold {\n  font-weight: $weight-bold !important;\n}\n\n// global utility classes\n.container-fluid {\n  width: 100%;\n  padding-right: 1rem;\n  padding-left: 1rem;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n.container {\n  width: 100%;\n  padding-right: 1rem;\n  padding-left: 1rem;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n@include mq($from: small) {\n  .container {\n    max-width: 540px;\n  }\n}\n\n@include mq($from: medium) {\n  .container {\n    max-width: 720px;\n  }\n\n  .container-fluid,\n  .container {\n    padding-right: 2rem;\n    padding-left: 2rem;\n  }\n}\n\n@include mq($from: large) {\n  .container {\n    max-width: 960px;\n  }\n}\n\n@include mq($from: xlarge) {\n  .container {\n    max-width: 1140px;\n  }\n}\n\n// reset css\n*,\n*::before,\n*::after {\n  box-sizing: border-box; // 1\n}\n\nh1, h2, h3, .h1, .h2, .h3, p {\n  font-weight: $weight-regular;\n}\n\n.h1, .h2, .h3 {\n  margin: 0;\n}\n\nh1, h2, h3, p {\n  margin: 0 0 1rem 0;\n}\n\n// button\n.btn {\n  display: inline-flex;\n  justify-content: center;\n  background-color: $color-green;\n  color: $color-white;\n  text-decoration: none;\n  min-width: 10rem;\n  padding: 0.75rem 1rem;\n  font-weight: bold;\n  transition: all 0.2s ease;\n  border: 1px solid transparent;\n\n  &:hover {\n    background-color: $color-white;\n    color: $color-green;\n    border-color: $color-green;\n  }\n}\n","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n///\n/// Do not override this value, or things will break\n///\n/// @link https://github.com/sass-mq/sass-mq/issues/122\n/// @deprecated This setting will be removed in sass-mq v6.0.0\n/// @access private\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (such as the layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   $mq-show-breakpoints: (mobile, tablet, desktop);\n///   @import 'path/to/mq';\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @ignore @param {Number} $base-font-size [$mq-base-font-size] - `<body>` font size (deprecated)\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if ($mq-base-font-size != 16px) {\n        @warn \"Overriding $mq-base-font-size will break things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if ($base-font-size != 16px) {\n        @warn \"The $base-font-size argument will be removed in sass-mq v6.0.0, as overriding it breaks things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $until [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $and [false] - Additional media query parameters\n/// @param {String} $media-type [$mq-media-type] - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints [$mq-breakpoints]\n/// @ignore @param {String} $static-breakpoint [$mq-static-breakpoint]\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$mq-show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$mq-breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n","@import \"../../App.scss\";\n\n.stories-carousel {\n  padding-top: 3rem;\n  padding-bottom: 3rem;\n\n  .swiper-container {\n    padding-left: 2px;\n    padding-right: 2px;\n  }\n\n  .swiper-slide {\n    width: 15rem;\n    display: block;\n    text-decoration: none;\n    box-shadow: 0 0 1px 1px rgba($color-black, 0.2);\n    margin: 2px;\n\n    @include mq($from: large) {\n      width: 22.5rem;\n    }\n  }\n\n  .card-image {\n    height: 0;\n    padding-bottom: 62.5%;\n    background-size: cover;\n    background-position: center;\n    background-repeat: no-repeat;\n    background-color: $color-dark-gray;\n  }\n\n  .card-footer {\n    padding: 1rem;\n\n    h3 {\n      color: $color-black;\n    }\n  }\n\n  .card-author {\n    display: flex;\n    align-items: center;\n\n    div {\n      border-radius: 50%;\n      width: 2rem;\n      height: 2rem;\n      background: $color-gray;\n\n      @include mq($from: large) {\n        width: 2.5rem;\n        height: 2.5rem;\n      }\n    }\n\n    span {\n      padding-left: 1rem;\n      color: $color-dark-gray;\n    }\n  }\n}","@import \"./scss/functions\";\n\n$themeColor: #007aff !default;\n$colors: ('white': #ffffff, 'black': #000000) !default;\n\n@font-face {\n  font-family: 'swiper-icons';\n  src: url(\"data:application/font-woff;charset=utf-8;base64, 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\") format(\"woff\");\n  font-weight: 400;\n  font-style: normal;\n}\n\n@import \"./components/core/core\";\n\n//IMPORT_COMPONENTS\n",":root {\n  --swiper-theme-color: $themeColor;\n}\n.swiper-container {\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  overflow: hidden;\n  list-style: none;\n  padding: 0;\n  /* Fix of Webkit flickering */\n  z-index:1;\n}\n.swiper-container-vertical > .swiper-wrapper {\n  flex-direction: column;\n}\n.swiper-wrapper {\n  position:relative;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  display: flex;\n  transition-property:transform;\n  box-sizing: content-box;\n}\n.swiper-container-android .swiper-slide,\n.swiper-wrapper {\n  transform:translate3d(0px,0,0);\n}\n.swiper-container-multirow > .swiper-wrapper {\n  flex-wrap: wrap;\n}\n.swiper-container-multirow-column > .swiper-wrapper {\n  flex-wrap: wrap;\n  flex-direction: column;\n}\n.swiper-container-free-mode > .swiper-wrapper {\n  transition-timing-function: ease-out;\n  margin: 0 auto;\n}\n.swiper-slide {\n  flex-shrink: 0;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  transition-property: transform;\n}\n.swiper-slide-invisible-blank {\n  visibility: hidden;\n}\n/* Auto Height */\n.swiper-container-autoheight {\n  &, .swiper-slide {\n    height: auto;\n  }\n\n  .swiper-wrapper {\n    align-items: flex-start;\n    transition-property: transform, height;\n  }\n}\n\n/* 3D Effects */\n.swiper-container-3d {\n  perspective: 1200px;\n  .swiper-wrapper, .swiper-slide, .swiper-slide-shadow-left, .swiper-slide-shadow-right, .swiper-slide-shadow-top, .swiper-slide-shadow-bottom, .swiper-cube-shadow {\n    transform-style: preserve-3d;\n  }\n  .swiper-slide-shadow-left, .swiper-slide-shadow-right, .swiper-slide-shadow-top, .swiper-slide-shadow-bottom {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    z-index: 10;\n  }\n  .swiper-slide-shadow-left {\n    background-image: linear-gradient(to left, rgba(0,0,0,0.5), rgba(0,0,0,0));\n  }\n  .swiper-slide-shadow-right {\n    background-image: linear-gradient(to right, rgba(0,0,0,0.5), rgba(0,0,0,0));\n  }\n  .swiper-slide-shadow-top {\n    background-image: linear-gradient(to top, rgba(0,0,0,0.5), rgba(0,0,0,0));\n  }\n  .swiper-slide-shadow-bottom {\n    background-image: linear-gradient(to bottom, rgba(0,0,0,0.5), rgba(0,0,0,0));\n  }\n}\n\n/* CSS Mode */\n.swiper-container-css-mode {\n  > .swiper-wrapper {\n    overflow: auto;\n    scrollbar-width: none; /* For Firefox */\n    -ms-overflow-style: none; /* For Internet Explorer and Edge */\n    &::-webkit-scrollbar {\n      display: none;\n    }\n  }\n  > .swiper-wrapper > .swiper-slide {\n    scroll-snap-align: start start;\n  }\n}\n.swiper-container-horizontal.swiper-container-css-mode {\n  > .swiper-wrapper {\n    scroll-snap-type: x mandatory;\n  }\n}\n.swiper-container-vertical.swiper-container-css-mode {\n  > .swiper-wrapper {\n    scroll-snap-type: y mandatory;\n  }\n}\n","@import \"~swiper/swiper.scss\";\n\n@import \"../../App.scss\";\n\n.page-stories-hero {\n  background-color: $color-black;\n  color: $color-white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 15rem;\n\n  @include mq($from: medium) {\n    height: 20rem;\n  }\n}","@import \"../../App.scss\";\n\nheader {\n  background-color: $color-white;\n  box-shadow: 0 0 2px 1px rgba($color-black, 0.2);\n  position: sticky;\n  position: -webkit-sticky;\n  top: 0;\n  z-index: 1000;\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n\n  @include mq($from: medium) {\n    padding-top: 1.5rem;\n    padding-bottom: 1.5rem;\n  }\n\n  & > nav {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  .link-home {\n    color: $color-black;\n  }\n\n  .link-signup {\n    color: $color-green;\n  }\n}","@import \"~sass-mq/mq\";\n\n$mq-breakpoints: (\n  small: 576px,\n  medium: 768px,\n  large: 992px,\n  xlarge: 1200px,\n);\n\n// Color Palette\n$color-black: #1c1c1c;\n$color-dark-gray: #8f8e8b;\n$color-gray: #e4e5e6;\n$color-light-gray: #f4f4f4;\n$color-white: #fff;\n$color-green: #159f9e;\n\n// typography\n$weight-light: 300;\n$weight-regular: 400;\n$weight-semibold: 600;\n$weight-bold: 700;\n$weight-black: 900;\n\nhtml, body {\n  font-family: 'Source Sans Pro', sans-serif;\n}\n\nh1, .h1 {\n  font-size: 30px;\n}\n\nh2, .h2 {\n  font-size: 25px;\n}\n\nh3, .h3 {\n  font-size: 20px;\n}\n\np, span, a {\n  font-size: 13px;\n}\n\n@include mq($from: medium) {\n  h1, .h1 {\n    font-size: 40px;\n  }\n  \n  h2, .h2 {\n    font-size: 35px;\n  }\n  \n  h3, .h3 {\n    font-size: 25px;\n  }\n  \n  p, span, a {\n    font-size: 15px;\n  }\n}\n\n.font-weight-bold {\n  font-weight: $weight-bold !important;\n}\n\n// global utility classes\n.container-fluid {\n  width: 100%;\n  padding-right: 1rem;\n  padding-left: 1rem;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n.container {\n  width: 100%;\n  padding-right: 1rem;\n  padding-left: 1rem;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n@include mq($from: small) {\n  .container {\n    max-width: 540px;\n  }\n}\n\n@include mq($from: medium) {\n  .container {\n    max-width: 720px;\n  }\n\n  .container-fluid,\n  .container {\n    padding-right: 2rem;\n    padding-left: 2rem;\n  }\n}\n\n@include mq($from: large) {\n  .container {\n    max-width: 960px;\n  }\n}\n\n@include mq($from: xlarge) {\n  .container {\n    max-width: 1140px;\n  }\n}\n\n// reset css\n*,\n*::before,\n*::after {\n  box-sizing: border-box; // 1\n}\n\nh1, h2, h3, .h1, .h2, .h3, p {\n  font-weight: $weight-regular;\n}\n\n.h1, .h2, .h3 {\n  margin: 0;\n}\n\nh1, h2, h3, p {\n  margin: 0 0 1rem 0;\n}\n\n// button\n.btn {\n  display: inline-flex;\n  justify-content: center;\n  background-color: $color-green;\n  color: $color-white;\n  text-decoration: none;\n  min-width: 10rem;\n  padding: 0.75rem 1rem;\n  font-weight: bold;\n  transition: all 0.2s ease;\n  border: 1px solid transparent;\n\n  &:hover {\n    background-color: $color-white;\n    color: $color-green;\n    border-color: $color-green;\n  }\n}\n","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n///\n/// Do not override this value, or things will break\n///\n/// @link https://github.com/sass-mq/sass-mq/issues/122\n/// @deprecated This setting will be removed in sass-mq v6.0.0\n/// @access private\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (such as the layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   $mq-show-breakpoints: (mobile, tablet, desktop);\n///   @import 'path/to/mq';\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @ignore @param {Number} $base-font-size [$mq-base-font-size] - `<body>` font size (deprecated)\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if ($mq-base-font-size != 16px) {\n        @warn \"Overriding $mq-base-font-size will break things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if ($base-font-size != 16px) {\n        @warn \"The $base-font-size argument will be removed in sass-mq v6.0.0, as overriding it breaks things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $until [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $and [false] - Additional media query parameters\n/// @param {String} $media-type [$mq-media-type] - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints [$mq-breakpoints]\n/// @ignore @param {String} $static-breakpoint [$mq-static-breakpoint]\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$mq-show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$mq-breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n"]}